// Save this file as MicroservicesDemo.java
// You can split it later into two Spring Boot apps if needed

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.context.annotation.Bean;
import org.springframework.boot.web.client.RestTemplateBuilder;

import java.util.Map;
import java.util.HashMap;

@SpringBootApplication
public class MicroservicesDemo {

    public static void main(String[] args) {
        SpringApplication.run(MicroservicesDemo.class, args);
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        return builder.build();
    }
}

// ======================= Account Service =======================
@RestController
@RequestMapping("/account")
class AccountController {

    private static final Map<String, Account> accounts = new HashMap<>();

    static {
        accounts.put("1001", new Account("Alice", "alice@example.com", 5000));
        accounts.put("1002", new Account("Bob", "bob@example.com", 3000));
    }

    @GetMapping("/{id}")
    public Account getAccount(@PathVariable String id) {
        Account account = accounts.get(id);
        if (account == null) {
            throw new RuntimeException("Account not found");
        }
        return account;
    }

    static class Account {
        public String name;
        public String email;
        public int balance;

        public Account(String name, String email, int balance) {
            this.name = name;
            this.email = email;
            this.balance = balance;
        }
    }
}

// ======================= Loan Service =======================
@RestController
@RequestMapping("/loan")
class LoanController {

    private final RestTemplate restTemplate;

    public LoanController(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @PostMapping("/apply")
    public Object applyLoan(@RequestBody LoanRequest request) {
        String accountUrl = "http://localhost:8080/account/" + request.accountId;

        try {
            AccountController.Account account = restTemplate.getForObject(accountUrl, AccountController.Account.class);
            if (account.balance >= request.amount * 0.5) {
                return new LoanResponse("Approved", account);
            } else {
                return new LoanResponse("Rejected", "Insufficient balance");
            }
        } catch (Exception e) {
            return new LoanResponse("Error", "Account not found or service unavailable");
        }
    }

    static class LoanRequest {
        public String accountId;
        public int amount;
    }

    static class LoanResponse {
        public String status;
        public Object details;

        public LoanResponse(String status, Object details) {
            this.status = status;
            this.details = details;
        }
    }
}
